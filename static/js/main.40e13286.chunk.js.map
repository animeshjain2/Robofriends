{"version":3,"sources":["serviceWorker.js","Component/Card.js","Component/CardList.js","Component/Searchbox.js","Component/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","console","log","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCDSC,EAfJ,SAACC,GAAS,IACdC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACd,OACC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAK,SAASC,IAAG,+BAA2BL,EAA3B,cACtB,6BACC,gCAAMC,GACN,2BAAIC,MCQOI,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACnB,OACA,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAKO,EAAOG,GAAGV,GAAIC,KAAOM,EAAOG,GAAGT,KAAMC,MAAQK,EAAOG,GAAGR,aCOpEU,EAbC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAEjB,OACC,yBAAKV,UAAW,OACf,2BACAA,UAAY,oCACZW,KAAK,SACLC,YAAc,gBACdC,SAAYH,MCDAI,EAPA,SAAClB,GACf,OACC,yBAAKmB,MAAS,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACpEtB,EAAMuB,WCyCIC,E,kDAxCb,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GAClBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACC,YAAYJ,EAAMK,OAAOC,SARvC,EAAKC,MAAO,CACXzB,OAAO,GACPsB,YAAY,IAJD,E,gEAaQ,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAErB,OAAQ8B,S,+BAGpC,IAAD,OACDC,EAAiBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GAC/C,OAAOA,EAAON,KAAKwC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEjE,OAA8B,IAA3BF,KAAKP,MAAMzB,OAAOoC,OAEb,uCAIR,yBAAKxC,UAAU,MACf,4CACA,kBAAC,EAAD,CAAWU,aAAc0B,KAAKf,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAU+B,U,GAlCJM,aCCnBC,IAASC,OACR,kBAAC,EAAD,MACGC,SAASC,eAAe,SN2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.40e13286.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card=(props)=>{\n\tconst{id,name,email} = props;\n\treturn (\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\n\t\t\t<img alt ='robots' src ={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2> {name}</h2>\n\t\t\t\t<p>{email}</p>\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n}\n\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( {robots} ) =>{\n\treturn (\n\t<div>\n\t{\n\t\trobots.map((user,i)=>{\n\t\treturn <Card key={i} id= {robots[i].id} name ={robots[i].name} email ={robots[i].email}/>;\n\t})\n\t}\n\t</div>\n\t);\n}\n\t\n\n\nexport default CardList;","import React from 'react';\n\nconst Searchbox=({searchChange} )=>{\n\n\treturn(\n\t\t<div className= 'pa2'>\n\t\t\t<input \n\t\t\tclassName = 'pa3 ba b --green bg-lightest-blue'\n\t\t\ttype='search'\n\t\t\tplaceholder = 'search robots'\n\t\t\tonChange = {searchChange} />\n\t\t</div>\n\t\t);\n} \n\nexport default Searchbox;\n\n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style = {{ overflowY: 'scroll', border :'1px solid black' ,height:'800px'}}>\n\t\t\t\t{props.children}\n\t\t</div>\n)}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../Component/CardList';\nimport Searchbox from '../Component/Searchbox';\nimport Scroll from '../Component/Scroll';\n\n class App extends Component{\n \tconstructor(){\n \t\tsuper()\n \t\tthis.state= {\n \t\t\trobots:[],\n \t\t\tsearchfield:''\n \t\t}\n \t}\n\n \tonSearchChange = (event) => {\n\t\tconsole.log(event);\t\n\t\tthis.setState({searchfield:event.target.value})\t\n \t}\n\n \tcomponentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n\trender(){\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n})\n\t\t\tif(this.state.robots.length===0)\n\t\t\t{\n\t\t\t\treturn <h1>Loading</h1>\n\t\t\t}else{\n\t\t\t \treturn (\n\t\t\t\n \t\t<div className='tc'>\n \t\t<h1>RobotFriends</h1>\n \t\t<Searchbox searchChange={this.onSearchChange}/>\n \t\t<Scroll>\n \t\t<CardList robots = {filteredRobots} />\n \t\t</Scroll>\n \t\t</div>\n \t\t);\n}}}\n \t\n\nexport default App ;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\nReactDOM.render(\n\t<App />,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}